generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  uniqueName     String     @unique
  hashtags       String[]
  description    String
  picture        String?
  portfolioUrl   String?
  rule           String
  password       String
  accessToken    String
  books          Book[]
  feedbacks      Feedback[]
  expirationTime DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  readers        Reader[]
}

model Reader {
  id           String   @id @default(uuid())
  author       User     @relation(fields: [authorEmail], references: [email])
  picture      String
  userName     String
  portfolioUrl String
  authorEmail  String
  userEmail    String
  latitude     Float
  longitude    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  books        Book[]
}

model Book {
  id                 String               @id @default(uuid())
  title              String
  tags               String[]
  description        String
  socialLink         String?
  heroPathUrl        String
  characters         Character[]
  conclued           Boolean              @default(false)
  isActive           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  reactions          Reaction[]
  Gender             String?
  Theme              String?
  hits               Int
  totalWords         Int?
  readers            Reader[]
  User               User?                @relation(fields: [userEmail], references: [email])
  userEmail          String?
  chapters           Chapter[]
  LastPublishedBooks LastPublishedBooks[]
}

model LastPublishedBooks {
  id        String   @id @default(uuid())
  bookId    String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
}

model LastPublishedChapter {
  id        Int      @id @default(1)
  chapterId String   @unique
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model LastPublishedCharacter {
  id          Int      @id @default(1)
  characterId String   @unique
  updatedAt   DateTime @updatedAt

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
}

model Chapter {
  id                   String                @id @default(uuid())
  isConclued           Boolean               @default(false)
  chapterTitle         String
  catchingText         String?
  chapterText          String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  Book                 Book                  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId               String
  characters           Character[]
  wordsCounter         Int
  dailyWordCounts      DailyWordCount[]
  comments             Comment[]
  reactions            Reaction[]
  firstLineIndent      String
  lineHeight           String
  fontSize             String
  fontWeight           String
  LastPublishedChapter LastPublishedChapter?
}

model DailyWordCount {
  id           String   @id @default(uuid())
  chapter      Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId    String
  wordsWritten Int
  date         DateTime @default(now())
}

model Reaction {
  id        String   @id @default(uuid())
  name      String
  iconName  String
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
}

model Character {
  id                     String                  @id @default(uuid())
  name                   String
  uniqueName             String                  @unique
  heroPathUrl            String
  description            String
  age                    Int
  hairColor              String
  sexuality              String
  race                   String
  lifeStatus             String
  lifeStatusDetails      String
  relationships          Relationship[]
  book                   Book                    @relation(fields: [bookId], references: [id])
  bookId                 String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  Chapter                Chapter?                @relation(fields: [chapterId], references: [id])
  chapterId              String?
  LastPublishedCharacter LastPublishedCharacter?
}

model Relationship {
  id               String    @id @default(uuid())
  characterId      String
  characters       Character @relation(fields: [characterId], references: [id])
  relationshipType String
  intention        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Feedback {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userEmail], references: [email])
  userEmail  String
  type       String
  feedback   String
  screenshot String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Goal {
  id                  String   @id @default(uuid())
  email               String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  goalComplete        Boolean
  goalCompletePercent Float
  words               Int
  goal                Int
}
